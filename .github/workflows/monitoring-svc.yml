name: Monitoring service
on:
  workflow_run:
    workflows: ["Build, test and push api gateway image to dockerhub"]
    types:
      - completed

env:
  USER_SVC_IMAGE: microservices-user-service
  STORE_SVC_IMAGE: microservices-store-service
  MONITORING_SVC_IMAGE: microservices-monitoring-service
  API_GATEWAY_IMAGE: microservices-api-gateway
  NGINX_IMAGE: nginx:mainline-alpine
  USER_CONTAINER: ps-user-svc
  STORE_CONTAINER: ps-store-svc
  MONITORING_CONTAINER: ps-monitoring-svc
  API_GATEWAY_CONTAINER: ps-api-gateway
  NGINX_CONTAINER: ps-nginx

jobs:

  build-and-publish:
    name: build and publish
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: setup node
        uses: actions/setup-node@v2
        with:
          node-version: '14'
      - name: install dependencies
        working-directory: monitoring-svc
        run: |
          npm install
      - name: build
        working-directory: monitoring-svc
        run: |
          npm run build
          npm run test
  
  push-to-docker-hub:
    name: build and push docker images to dockerhub
    runs-on: ubuntu-latest
    needs: [build-and-publish]
    
    steps:
      - name: checkout repo
        uses: actions/checkout@v2
      
      - name: set up QEMU
        uses: docker/setup-qemu-action@v1
    
      - name: set up docker build
        uses: docker/setup-buildx-action@v1

      - name: Cache docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-monitoring-svc-cache
          key: ${{ runner.os }}-monitoring-svc-buildx
      
      - name: login to dockerhub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      - name: build and push
        uses: docker/build-push-action@v2
        with:
          context: ./monitoring-svc
          file: ./monitoring-svc/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/${{ env.MONITORING_SVC_IMAGE }}:latest
          cache-from: type=local,src=/tmp/.buildx-monitoring-svc-cache
          cache-to: type=local,dest=/tmp/.buildx-monitoring-svc-cache-new

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-monitoring-svc-cache
          mv /tmp/.buildx-monitoring-svc-cache-new /tmp/.buildx-monitoring-svc-cache

  deploy-to-aws:
    name: deploy to ec2 instance
    runs-on: ubuntu-latest

    steps:
      - name: setup SSH connection
        uses: webfactory/ssh-agent@v0.5.1
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      - name: adding known hosts
        run: ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: pull user service docker image
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "docker pull ${{ secrets.DOCKER_USERNAME }}/${{ env.USER_SVC_IMAGE }}:latest"
    
      - name: pull store service docker image
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "docker pull ${{ secrets.DOCKER_USERNAME }}/${{ env.STORE_SVC_IMAGE }}:latest"
      - name: pull api gateway docker image
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "docker pull ${{ secrets.DOCKER_USERNAME }}/${{ env.API_GATEWAY_IMAGE }}:latest"
      - name: pull monitoring service docker image
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "docker pull ${{ secrets.DOCKER_USERNAME }}/${{ env.MONITORING_SVC_IMAGE }}:latest"
      - name: stop running container
        continue-on-error: true
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "docker stop $(docker ps -a -q)"
      - name: remove stopped container
        continue-on-error: true
        run: ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "docker rm $(docker ps -a -q)"
      
      - name: start user service as a docker container
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "docker run -d -p 3000:3000 --network=microservices --env-file ~/app/user-svc/.env --name ${{ env.USER_CONTAINER }} ${{ secrets.DOCKER_USERNAME }}/${{ env.USER_SVC_IMAGE }}"
      - name: start store service as a docker container
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "docker run -d -p 3004:3004 --network=microservices --env-file ~/app/store-svc/.env --name ${{ env.STORE_CONTAINER }} ${{ secrets.DOCKER_USERNAME }}/${{ env.STORE_SVC_IMAGE }}"
      - name: start api gateway as a docker container
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "docker run -d -p 3001:3001 --network=microservices --env-file ~/app/api-gateway/.env --name ${{ env.API_GATEWAY_CONTAINER }} ${{ secrets.DOCKER_USERNAME }}/${{ env.API_GATEWAY_IMAGE }}"
      - name: start monitoring service as a docker container
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "docker run -d -p 3002:3002 --network=microservices --env-file ~/app/monitoring-svc/.env --name ${{ env.MONITORING_CONTAINER }} ${{ secrets.DOCKER_USERNAME }}/${{ env.MONITORING_SVC_IMAGE }}"
      - name: start nginx as a docker container
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "docker run -d -p 80:80 --network=microservices -v /home/ubuntu/app/nginx:/etc/nginx/conf.d --restart=unless-stopped --name ${{ env.NGINX_CONTAINER }} nginx:mainline-alpine"