name: Build, test and push microservices image to docker hub

on:
  push:
    branches: [ master ]

env:
  IMAGE: microservices-user-service
  CONTAINER: ps-usr-svc

jobs:

  build-and-publish:
    name: build and publish
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: setup node
        uses: actions/setup-node@v2
        with:
          node-version: '14'
      - name: install dependencies
        working-directory: user-svc
        run: |
          npm install
      - name: build
        working-directory: user-svc
        run: |
          npm run build
          npm run test
  
  push-to-docker-hub:
    name: build and push docker images to dockerhub
    runs-on: ubuntu-latest
    needs: [build-and-publish]
    
    steps:
      - name: checkout repo
        uses: actions/checkout@v2
      
      - name: set up QEMU
        uses: docker/setup-qemu-action@v1
    
      - name: set up docker build
        uses: docker/setup-buildx-action@v1
      
      - name: login to dockerhub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      - name: build and push
        uses: docker/build-push-action@v2
        with:
          context: ./user-svc
          file: ./user-svc/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE }}:latest

  deploy-to-aws:
    needs: [push-to-docker-hub]
    runs-on: ubuntu-latest
    name: deploy to ec2 instance

    steps:
      - name: setup SSH connection
        uses: webfactory/ssh-agent@v0.5.1
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      - name: adding known hosts
        run: ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: pull latest docker image
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "docker pull ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE }}:latest"

      - name: stop running container
        continue-on-error: true
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "docker stop ${{ env.CONTAINER }}"

      - name: remove stopped container
        continue-on-error: true
        run: ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "docker rm ${{ env.CONTAINER }}"
      
      - name: start latest tag
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "docker run -d -p 80:3000 --env-file ~/app/.env --name ${{ env.CONTAINER }} ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE }}"